1.普通的情况,但IOC容器中有且只有一个实例对象时,自动装配不会出现歧义性,正常运行

2.当存在多态时候,可能某个接口在IOC容器中有多个实现类的实例存在,这时候就存在装配的歧义性,IOC不知道该如何装配
    解决办法一:
        1.如果是在Java类中配置,可以使用@Primary注解来标识首选项的Bean
        2.如果是在XML中配置,可以将<Bean>标签的primary属性设置成true

  解决办法二:
                     首先使用注解@Qualifier在实现类上定义特性(如果不显示的定义,默认特性名称为该类的类名),然后在需要自动注入的地方使用该特性就行,使用方式和定义一致,需要显示的指出特性名称.
                     该方式的弊端: 如果定义时使用的是默认的特性名称,即首字母小写的类名,那么在日后重构类名成后,特性名称也随之改变,建议使用该方式,定义特性名称显示的写出

3.如果代码中某个接口存在指定了多个首选项的实现类注册到容器中或者定义了多个具有相同特性名称得类,那么将继续存在装配的歧义性.也就是在第2条中的两种方法都没法解决这种歧义性了.
    解决办法:   自定义特性注解   (自定义注解要继承@Qualifier),如果有多个特性那么自定义出多个不同名称的特性注解组合使用既可解决该问题

